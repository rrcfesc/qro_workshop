<?php

namespace AppBundle\Tests\Service;

use AppBundle\Entity\Baker;
use AppBundle\Entity\ChurroTimeEntry;
use AppBundle\Service\ChurroTimeEntryStatsHelper;
use AppBundle\Service\GetChurroTimeEntry;
use Doctrine\ORM\EntityManagerInterface;
use PHPUnit\Framework\TestCase;
use PHPUnit_Framework_MockObject_MockObject;
use Psr\Log\LoggerInterface;

class ChurroTimeEntryStatsHelperTest extends TestCase
{
    /** @var PHPUnit_Framework_MockObject_MockObject */
    private $logger;

    /** @var PHPUnit_Framework_MockObject_MockObject */
    private $getChurroTimeEntry;

    /**
     * {@inheritDoc}
     */
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->logger = $this->createMock(LoggerInterface::class);
        $this->getChurroTimeEntry = $this->createMock(GetChurroTimeEntry::class);
    }

    /**
     * @dataProvider getData
     */
    public function testGetMostEfficientTypeData($bestType, $avg, $timeEntries)
    {
        $this->getChurroTimeEntry->expects($this->once())
            ->method('__invoke')
            ->willReturn($timeEntries);
        $helper = new ChurroTimeEntryStatsHelper($this->getChurroTimeEntry);

        $helperResult = $helper->getMostEfficientTypeData();
        $this->assertSame($avg, $helperResult->getAvg());

    }


    /**
     * @return array<int, array<>>
     */
    public function getData()
    {

        $baker = new Baker();
        $baker->setUsername('diego');

        $bakerIgnored = new Baker();
        $bakerIgnored->setUsername('jwage');

        $entry1 = new ChurroTimeEntry();
        $entry1->setType('chocolate');
        $entry1->setQuantityMade(10);
        $entry1->setBakedBy($baker);

        $entry2 = new ChurroTimeEntry();
        $entry2->setType('chocolate');
        $entry2->setQuantityMade(20);
        $entry2->setBakedBy($baker);

        $entry3 = new ChurroTimeEntry();
        $entry3->setType('vanilla');
        $entry3->setQuantityMade(14);
        $entry3->setBakedBy($baker);

        $ignoredJonWageEntry = new ChurroTimeEntry();
        $ignoredJonWageEntry->setType('vanilla');
        $ignoredJonWageEntry->setQuantityMade(14);
        $ignoredJonWageEntry->setBakedBy($bakerIgnored);

        $entries = [$entry1, $entry2, $entry3, $ignoredJonWageEntry];

        return [
            ['chocolate', 15, $entries]
        ];
    }
}